<%= javascript_include_tag '/openlayers/OpenLayers.js' %>
<script type="text/javascript" charset="utf-8">
    function set_cookie(c_key, c_val) {
      var c = c_key + '=' + c_val;

      // cookie expires in 1 month
      var dt = new Date();
      dt.setTime(dt.getTime() + (30 * 24 * 60 * 60 * 1000));
      c = c + '; expires=' + dt.toGMTString();
      c = c + '; path=/';
      document.cookie = c;
    }

    function get_cookie(c_key) {
      var c_key_eq = c_key + "=";
      var cookies = document.cookie.split(';');
      var i;
      for(i = 0; i < cookies.length; i++) {
        var cookie = cookies[i];
        while (cookie.charAt(0)==' ') {
          cookie = cookie.substring(1, cookie.length);
        }

        if (cookie.indexOf(c_key_eq) == 0) {
          return cookie.substring(c_key_eq.length, cookie.length);
        }
      }

      return null;
    }

    // Coordinates for Ottawa, ON or values saved in cookies
    var lat = get_cookie('lat') != null ? parseFloat(get_cookie('lat').replace(/^\s+|\s+$/g,"")) : 45.420833;
    var lon = get_cookie('lon') != null ? parseFloat(get_cookie('lon').replace(/^\s+|\s+$/g,"")) : -75.69;
    var zoom = get_cookie('zoom') != null ? parseInt(get_cookie('zoom').replace(/^\s+|\s+$/g,"")) : 12;

    var last_zoom = zoom;

    var map; // holds Map object
    var markers; // holds Markers object
    var my_markers = new Array(); // our list of Markers

    /* var my_ids = ["ChargingStation", "CivilService","Cosmetics",
                  "Education", "Finance","Gastronomy",
                   "Health","Landscape", "Leisure","Parking",
                   "PlacesOfInterest", "PlacesOfWorship", "PublicTransport",
                   "Shopping", "Travel"];*/


    // Determines if the marker is within the bounds of the visible part of the map at the current zoom level
    function marker_is_in_view(marker) {
      var tlLonLat = map.getLonLatFromPixel(new OpenLayers.Pixel(1,1)).
            transform(map.getProjectionObject(),map.displayProjection);
      var mapsize = map.getSize();
      var brLonLat = map.getLonLatFromPixel(new OpenLayers.Pixel(mapsize.w - 1, mapsize.h - 1)).
            transform(map.getProjectionObject(),map.displayProjection);

      var tlLonLatF = new OpenLayers.LonLat(tlLonLat.lon, tlLonLat.lat).transform(new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject());
      var brLonLatF = new OpenLayers.LonLat(brLonLat.lon, brLonLat.lat).transform(new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject());

      if (tlLonLatF.lon <= marker.lonlat.lon && marker.lonlat.lon <= brLonLatF.lon &&
          tlLonLatF.lat >= marker.lonlat.lat && marker.lonlat.lat >= brLonLatF.lat) {
        return 1;
      } else {
        return 0;
      }
    }


    // Determines if the parameter is in the my_markers array
    function marker_in_my_markers(marker) {
      for (var i = 0; i < my_markers.length; i++) {
        if (my_markers[i].lonlat.lon == marker.lonlat.lon && my_markers[i].lonlat.lat == marker.lonlat.lat) {
          return 1;
        }
      }
      return 0;
    }

    // When the map is moved, fetch some markers
    function moveend_listener(evt) {
      var zoom = map.getZoom();
      var tlLonLat = map.getLonLatFromPixel(new OpenLayers.Pixel(1,1)).
            transform(map.getProjectionObject(),map.displayProjection);
      var mapsize = map.getSize();
      var brLonLat = map.getLonLatFromPixel(new OpenLayers.Pixel(mapsize.w - 1, mapsize.h - 1)).
            transform(map.getProjectionObject(),map.displayProjection);

     /* var k = 0;
      var my_cnames = new Array();

      for (var j = 0; j < my_ids.length; j++){
        if (document.getElementById(my_ids[j]).checked) {
          my_cnames[k] = my_ids[j];
          k = k + 1;
        }
      }*/

      var extents = getMapExtent();

      var url = "/api/0.6/ontosearch?"
           + "zoom=" + zoom
           + "&class=" + "<%=  @classes.join(',') %>"
           + "&minlon=" + extents.left // tlLonLat.lon
           + "&maxlat=" + extents.top // tlLonLat.lat
           + "&minlat=" + extents.bottom // brLonLat.lon
           + "&maxlon=" + extents.right // brLonLat.lat;

      // GET and process some markers
      jQuery.get(url, function(data) {
        // Remove markers that aren't within the bounds of the visible part of the map at the current zoom level
        // Keep markers that are within the bounds of the visible part of the map at the current zoom level
        var my_markers_2 = new Array();
        while (my_markers.length > 0) {
          var current_marker = my_markers.pop();
          if (last_zoom < map.getZoom() && marker_is_in_view(current_marker) == 1) {
            my_markers_2.push(current_marker);
          } else {
            markers.removeMarker(current_marker);
            current_marker.destroy();
          }
        }
        my_markers = my_markers_2;
        last_zoom = map.getZoom();

        jQuery(data).find('wpt').each(function() {
          var wpt = jQuery(this);

          // Build a new marker
          var size = new OpenLayers.Size(32, 37);
          var offset = new OpenLayers.Pixel(-(size.w / 2), -size.h);
          var icon = new OpenLayers.Icon('/images/markers/' + jQuery(this).find("sym").text(), size, offset);
          var lonLatMarker = new OpenLayers.LonLat(wpt.attr('lon'), wpt.attr('lat')).transform(new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject());
          var marker = new OpenLayers.Marker(lonLatMarker, icon);

          if (marker_in_my_markers(marker) == 1) {
            // if we already have this marker on the map, don't try to re-add it
            marker.destroy();
          } else {
            // Add the marker to the map
            var feature = new OpenLayers.Feature(markers, lonLatMarker);
            feature.closeBox = true;
            feature.popupClass = OpenLayers.Class(OpenLayers.Popup.AnchoredBubble, {minSize: new OpenLayers.Size(300, 180) } );
            feature.data.popupContentHTML = '<p><b>' + jQuery(this).find("name").text() + '</b></p>' + jQuery(this).find("desc").text();
            feature.data.overflow = "auto";
            marker.feature = feature;

            var markerClick = function(evt) {
              if (this.popup == null) {
                this.popup = this.createPopup(this.closeBox);
                map.addPopup(this.popup);
                this.popup.show();
              } else {
                this.popup.toggle();
              }
              OpenLayers.Event.stop(evt);
            };

            marker.events.register("mousedown", feature, markerClick);

            markers.addMarker(marker);
            my_markers.push(marker);
          }
        });
      });

      var centerLonLat = map.getLonLatFromPixel(new OpenLayers.Pixel(mapsize.w / 2, mapsize.h / 2)). transform(map.getProjectionObject(),map.displayProjection);

      set_cookie('lon', centerLonLat.lon);
      set_cookie('lat', centerLonLat.lat);
      set_cookie('zoom', map.getZoom());
    }

var layer;
function init(){
var options = {
minZoomLevel:4 ,
maxZoomLevel:15,
numZoomLevels:11
,eventListeners: { "moveend": moveend_listener, "zoomend": moveend_listener }
};
map = new OpenLayers.Map('map',options); //add the map
map.addControl(new OpenLayers.Control.LayerSwitcher()); //add the + control on the right side of the page
map.addControl(new OpenLayers.Control.PanZoomBar());

layer = new OpenLayers.Layer.OSM( "Open Street Map"); //Use the OSM Map (we can add a google map instead etc..)
map.addLayer(layer);
//map.zoomToMaxExtent();
map.setCenter(new OpenLayers.LonLat(8.787, 53.048).transform(new OpenLayers.Projection("EPSG:4326"),new OpenLayers.Projection("EPSG:900913")), 12); // Go directly to Bremen

markers = new OpenLayers.Layer.Markers("Points of Interest");
map.addLayer(markers);


};
</script>
 
<% content_for "doroam" do %>

 <div id="left_menu" class="left_menu">

<%= form_tag("/site/search") %>
    <table border="0">
  	  <tr><td>
           <label>Address:</label></br>
		     <%= text_field_tag('street','Street', :size => 15)%>
		     <%= text_field_tag('no','No.', :size => 3)%> </br>
		     <%= text_field_tag('zip','Zip', :size => 5)%>
		     <%= text_field_tag('city','City', :size => 15)%></br>
		     <%= text_field_tag('country','Country', :size => 15)%>		 
      </td></tr>
  	  <tr><td>
           <label>Activities:</label></br>
		   <% o = @om.source %>
		   <% classes = o.roots[0].subclasses[1].subclasses %>
		   <% classes.each do |c| %>
		        <div>
			    <%= check_box_tag "class[" + c.id.to_s + "]" %>
                            <%= c.name %></div>
           <% end %>
		   <% if classes.size > 116 %>
    	       <%= link_to "More ...", "#" %> 
           <% end %>
      </td></tr>
  	  <tr><td>  	  	
      <%= submit_tag("search")%><br/>
          <%= check_box_tag "time"%> Time: <%= select_tag "day", 
               options_for_select([["Mon", 1],["Tue",2],["Wed",3],["Thu",4],["Fri",5],["Sat",6],["Sun",7]], 
                 [1]) %>
		    <%= select_tag "hour", 
               options_for_select((0..23).map{|i| [i,i]}, 
                 [10]) %> :
			<%= select_tag "min", 
               options_for_select((0..5).map{|i| [i*10,i*10]}, 
                 [0]) %>	 
      </td></tr>
  	  <tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Duration:
		    <%= select_tag "duration_hour", 
               options_for_select((0..23).map{|i| [i,i]}, 
                 [10]) %> :
			<%= select_tag "duration_min", 
               options_for_select((0..5).map{|i| [i*10,i*10]}, 
                 [0]) %>	
      </td></tr>

	</table>
    </form>
  </td>
</tr>

</div>
<% end %>