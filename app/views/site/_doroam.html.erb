<script type="text/javascript" charset="utf-8">
    function set_cookie(c_key, c_val) {
      var c = c_key + '=' + c_val;

      // cookie expires in 1 month
      var dt = new Date();
      dt.setTime(dt.getTime() + (30 * 24 * 60 * 60 * 1000));
      c = c + '; expires=' + dt.toGMTString();
      c = c + '; path=/';
      document.cookie = c;
    }

    function get_cookie(c_key) {
      var c_key_eq = c_key + "=";
      var cookies = document.cookie.split(';');
      var i;
      for(i = 0; i < cookies.length; i++) {
        var cookie = cookies[i];
        while (cookie.charAt(0)==' ') {
          cookie = cookie.substring(1, cookie.length);
        }

        if (cookie.indexOf(c_key_eq) == 0) {
          return cookie.substring(c_key_eq.length, cookie.length);
        }
      }

      return null;
    }

    var zoom = get_cookie('zoom') != null ? parseInt(get_cookie('zoom').replace(/^\s+|\s+$/g,"")) : 12;

    var last_zoom = zoom;

    var markers; // holds Markers object
    var my_markers = new Array(); // our list of Markers

    // Determines if the marker is within the bounds of the visible part of the map at the current zoom level
    function marker_is_in_view(marker) {
	  var extents = getMapExtent();
      if (extents.left <= marker.lonlat.lon && marker.lonlat.lon <= extents.right &&
          extents.top >= marker.lonlat.lat && marker.lonlat.lat >= extents.bottom) {
        return 1;
      } else {
        return 0;
      }
	  
 //     var tlLonLat = map.getLonLatFromPixel(new OpenLayers.Pixel(1,1)).
 //           transform(map.getProjectionObject(),map.displayProjection);
 //     var mapsize = map.getSize();
 //     var brLonLat = map.getLonLatFromPixel(new OpenLayers.Pixel(mapsize.w - 1, mapsize.h - 1)).
 //           transform(map.getProjectionObject(),map.displayProjection);
//
 //     var tlLonLatF = new OpenLayers.LonLat(tlLonLat.lon, tlLonLat.lat).transform(new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject());
 //     var brLonLatF = new OpenLayers.LonLat(brLonLat.lon, brLonLat.lat).transform(new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject());

 //     if (tlLonLatF.lon <= marker.lonlat.lon && marker.lonlat.lon <= brLonLatF.lon &&
 //         tlLonLatF.lat >= marker.lonlat.lat && marker.lonlat.lat >= brLonLatF.lat) {
 //       return 1;
 //     } else {
 //       return 0;
 //     }
    }


    // Determines if the parameter is in the my_markers array
    function marker_in_my_markers(marker) {
      for (var i = 0; i < my_markers.length; i++) {
        if (my_markers[i].lonlat.lon == marker.lonlat.lon && my_markers[i].lonlat.lat == marker.lonlat.lat) {
          return 1;
        }
      }
      return 0;
    }

    // When the map is moved, fetch some markers
    function moveend_listener(evt) {
      var zoom = map.getZoom();
      var tlLonLat = map.getLonLatFromPixel(new OpenLayers.Pixel(1,1)).
            transform(map.getProjectionObject(),map.displayProjection);
      var mapsize = map.getSize();
      var brLonLat = map.getLonLatFromPixel(new OpenLayers.Pixel(mapsize.w - 1, mapsize.h - 1)).
            transform(map.getProjectionObject(),map.displayProjection);

      var extents = getMapExtent();

      var url = "/api/0.6/ontosearch?"
           + "zoom=" + zoom
           + "&class=" + "<%=  @classes.join(',') %>"
           + "&minlon=" + extents.left // tlLonLat.lon
           + "&maxlat=" + extents.top // tlLonLat.lat
           + "&minlat=" + extents.bottom // brLonLat.lon
           + "&maxlon=" + extents.right // brLonLat.lat;

      // GET and process some markers
      $j.get(url, function(data) {
        // Remove markers that aren't within the bounds of the visible part of the map at the current zoom level
        // Keep markers that are within the bounds of the visible part of the map at the current zoom level
        var my_markers_2 = new Array();
        while (my_markers.length > 0) {
          var current_marker = my_markers.pop();
          if (last_zoom < map.getZoom() && marker_is_in_view(current_marker) == 1) {
            my_markers_2.push(current_marker);
          } else {
            markers.removeMarker(current_marker);
            current_marker.destroy();
          }
        }
        my_markers = my_markers_2;
        last_zoom = map.getZoom();

        $j(data).find('wpt').each(function() {
          var wpt = $j(this);

          // Build a new marker
          var size = new OpenLayers.Size(32, 37);
          var offset = new OpenLayers.Pixel(-(size.w / 2), -size.h);
          var icon = new OpenLayers.Icon('/images/markers/' + $j(this).find("sym").text(), size, offset);
          var lonLatMarker = new OpenLayers.LonLat(wpt.attr('lon'), wpt.attr('lat')).transform(new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject());
          var marker = new OpenLayers.Marker(lonLatMarker, icon);

          if (marker_in_my_markers(marker) == 1) {
            // if we already have this marker on the map, don't try to re-add it
            marker.destroy();
          } else {
            // Add the marker to the map
            var feature = new OpenLayers.Feature(markers, lonLatMarker);
            feature.closeBox = true;
            feature.popupClass = OpenLayers.Class(OpenLayers.Popup.AnchoredBubble, {minSize: new OpenLayers.Size(300, 180) } );
            feature.data.popupContentHTML = '<p><b>' + $j(this).find("name").text() + '</b></p>' + $j(this).find("desc").text();
            feature.data.overflow = "auto";
            marker.feature = feature;

            var markerClick = function(evt) {
              if (this.popup == null) {
                this.popup = this.createPopup(this.closeBox);
                map.addPopup(this.popup);
                this.popup.show();
              } else {
                this.popup.toggle();
              }
              OpenLayers.Event.stop(evt);
            };

            marker.events.register("mousedown", feature, markerClick);

            markers.addMarker(marker);
            my_markers.push(marker);
          }
        });
      });
 
      set_cookie('zoom', map.getZoom());
    }

</script>
 
<% content_for "doroam" do %>

 <div id="left_menu" class="left_menu">

<%= form_tag("/site/search") %>
  <table border=0>
  	<tr><td>
  	<div>
           <label>Activities:</label></br>		   
		   <% o = @om.source %>
		   <% main_class = o.roots[0].subclasses[1] %>
		   <ul id="menu">
		     <% main_class.subclasses.each do |c| %>
  		         <%= diplay_class_menu(@om,c) %>				  	
             <% end %>
           </ul>
  </div> 	
  </p>
 </td></tr>
  	<tr><td>
 	  <div>  	
      <%= submit_tag("search")%>
  </div> 	
  <div>  	         <%= check_box_tag "time"%> Time: <%= select_tag "day", 
               options_for_select([["Mon", 1],["Tue",2],["Wed",3],["Thu",4],["Fri",5],["Sat",6],["Sun",7]], 
                 [1]) %>
		    <%= select_tag "hour", 
               options_for_select((0..23).map{|i| [i,i]}, 
                 [10]) %> :
			<%= select_tag "min", 
               options_for_select((0..5).map{|i| [i*10,i*10]}, 
                 [0]) %>	 
   </div> 	
  <div>  
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Duration:
		    <%= select_tag "duration_hour", 
               options_for_select((0..23).map{|i| [i,i]}, 
                 [10]) %> :
			<%= select_tag "duration_min", 
               options_for_select((0..5).map{|i| [i*10,i*10]}, 
                 [0]) %>	
   </div> 	
     </form>
  </td>
</tr>
</table>
</div>
<% end %>